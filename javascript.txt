1)Every browser has javascript engine running in the background which runs the javascript code.
FireFox - spiderMonkey
Chrome - v8
Thats why the code can be written in the developer tools console area
JavaScript can execute not only in the browser, but also on the server, or actually on any device that has a special program called the JavaScript engine.
The browser has an embedded engine sometimes called a “JavaScript virtual machine”.

Every browser will have javascript engine which will do the following-

The engine (embedded if it’s a browser) reads (“parses”) the script.
Then it converts (“compiles”) the script to the machine language.
And then the machine code runs, pretty fast.

2)there are some web development servers available like Live Server which actually has some extra features like auto reload on changes etc.
http://127.0.0.1:5500/index.html
here the url indicates from where the pages are served from.

3)The reasons for loading the <scripts> in the body tag is that -
Reason 1 - If you load in the head tag, then the problem is that if the script takes lot of time to load then the content of the body tag will not be loaded and user might experience some delay or may be whitepage while the browser is busy parsing/executing the javascript code in scripts etc.

Reason 2 - If you have scripts at the head where the javascript code in that script will have to talk to the elements in the HTML. In that case the elements should be loaded only then the script has to be applied kinda.

However, some 3rd party script should be run in the head tag itself 

4)Run the index.html in the browser and see "Hello world" and the same code in the terminal with node index.js then also you see "Hello world" because the browser v8 engine is integrated with node.

5)In javascript there is no separate floating point and integer or number. All the numbers are numbers like 1.02 and 1.99999 or 133232 or 1 is typeof number

6) Console guys
var some = undefined
typeof(some)
"undefined"

var some = null
typeof(some)
"object"

7)the values in the array need not be same type. var arr = ["hi", "sam", 3 , "phew"]

var p = { name : "anna", age : 26}
typeof(p)
"object"

var someArr = [1,2,"some","pl"]
typeof(someArr)
"object"

8)Procedure oriented programming will have many functions and many variables all together which calls each other and dependent of each other with messy approach like spagheti.
Object oriented approach will group the respective functions and variables in a Object. If you have car object then only those data related to car will be residing in it.
This approach is Object Oriented programming.This is called ENCAPSULATION.

9)You have a DVD player with full complexity inside and outside you have fewer buttons to interact with Likewise we can make our object have all complex logic hidden exposing only simple functions and variables for the outsidee world. Make the complex functions and variables private within them to abstract it. By doing this one can give a simple interface

10)Inheritance as you know helps us to remove redundant code. You need not write code in multiple places instead choose Inheritance

11) In ES6, a new feature is like -

var obj = {
    radius : radius,
    border  : 1
}

or

var obj = {
    radius,
    border  : 1
}

Here key and value are both same, so you can directly use radius

12)The keyword new is very special. Whenever used it creates a new empty objec copy and then add properties and functions to it and then returns it. Without this if you invoke the object, then the this will point to global window object. By using new, it makes it point to the guy who called it.

Example: var some = new Circle(1)
Example: var phew = Circle(1)
So the new plays a very important role in this ;)

13)Every object has a constructor property in it.
A string can be created like "some" or " " or new String("some")
A number can be created like 1, 2 or new Number(4)
A function can be created like function some(){} or like 
new Function('args',`this.draw = function(){console.log("hi")`)

14)Every function is a object. 

15)ECMAScript 5 (ES5) appeared. It added new features to the language and modified some of the existing ones. To keep the old code working, most modifications are off by default. You need to explicitly enable them with a special directive: "use strict".

The directive looks like a string: "use strict" or 'use strict'. When it is located at the top of a script, the whole script works the “modern” way. The "use strict" directive switches the engine to the “modern” mode, changing the behavior of some built-in features. We’ll see the details later in the tutorial.Looking ahead, let’s just note that "use strict" can be put at the start of most kinds of functions instead of the whole script. Doing that enables strict mode in that function only. But usually, people use it for the whole script.

=>    // note: no "use strict" in this example

    num = 5; // the variable "num" is created if it didn't exist

    console.log(num); // 5

=>   "use strict";

num = 5; // error: num is not defined

16)let let = 5; // can't name a variable "let", error!
let var = 5; // can't name a variable "var", error!
let return = 5; // also can't name it "return", error!

17)In JavaScript, there are 3 types of quotes.

Double quotes: "Hello".
Single quotes: 'Hello'.
Backticks: `Hello ${name}`.

18)The operator ++/-- before or after the variable matters. ++counter to counter++

Let’s clarify. As we know, all operators return a value. Increment/decrement is no exception. The prefix form returns the new value while the postfix form returns the old value (prior to increment/decrement).

let counter = 1;
let a = ++counter; // (*)

console.log(a); // 2

let counter = 1;
let a = counter++; // (*) changed ++counter to counter++

console.log(a); // 1

If the result of increment/decrement is not used, there is no difference in which form to use:
let counter = 0;
counter++;
++counter;
console.log( counter ); // 2, the lines above did the same

If we’d like to increase a value and immediately use the result of the operator, we need the prefix form:
let counter = 0;
console.log( ++counter ); // 1

If we’d like to increment a value but use its previous value, we need the postfix form:
let counter = 0;
console.log( counter++ ); // 0

let counter = 1;
alert( 2 * ++counter ); // 4

let counter = 1;
alert( 2 * counter++ ); // 2, because counter++ returns the "old" value

19)String comparison
To see whether a string is greater than another, JavaScript uses the so-called “dictionary” or “lexicographical” order.
In other words, strings are compared letter-by-letter.

http://javascript.info/comparison

20)Interaction modals - alert, popup and confirm

let ans = popup("how are you", '') //IE
let ans = popup("how are you") //General
alert("The response is ", ans)

let yesOrNo = confirm("Are you insane?")
alert(yesOrNo)
//OK click returns true, Cancel returns false

21)Normally, a loop exits when its condition becomes falsy.
But we can force the exit at any time using the special break directive.

The continue directive is a “lighter version” of break. It doesn’t stop the whole loop. Instead, it stops the current iteration and forces the loop to start a new one (if the condition allows).

22)For Switch If there is no break then the execution continues with the next case without any checks.

23)A function with an empty return or without it returns undefined
function doNothing() { /* empty */ }

alert( doNothing() === undefined ); // true

function doNothing() {
  return;
}

alert( doNothing() === undefined ); // true

24)In JavaScript, a default parameter is evaluated every time the function is called without the respective parameter. In the example above, anotherFunction() is called every time showMessage() is called without the text parameter.
 
function showMessage(from, text = anotherFunction()) {
  // anotherFunction() only executed if no text given
  // its result becomes the value of text
}

25)A function with an empty return or without it returns undefined
If a function does not return a value, it is the same as if it returns undefined:

You can check if like this also
function showMovie(age) {
  if ( !checkAge(age) ) {
    return;
  }

  alert( "Showing you the movie" ); // (*)
  // ...
}

26)Never add a newline between return and the value like 
return
 (some + long + expression + or + whatever * f(a) + f(b))

That doesn’t work, because JavaScript assumes a semicolon after return. That’ll work the same as:
return;
 (some + long + expression + or + whatever * f(a) + f(b))
 So, it effectively becomes an empty return.

If we want the returned expression to wrap across multiple lines, we should start it at the same line as return. Or at least put the opening parentheses there as follows:
return (
  some + long + expression
  + or +
  whatever * f(a) + f(b)
  )

  function some() {
	var a = 10;
	function a(){
		console.log("hi");
	}
	console.log(a())
}

27)When we use modern features of the language, some engines may fail to support such code. Just as said, not all features are implemented everywhere.Babel is a transpiler. It rewrites modern JavaScript code into the previous standard.

Actually, there are two parts in Babel:

First, the transpiler program, which rewrites the code. The developer runs it on their own computer. It rewrites the code into the older standard. And then the code is delivered to the website for users. Modern project build systems like webpack provide means to run transpiler automatically on every code change, so that very easy to integrate into development process.

Second, the polyfill.

New language features may include new built-in functions and syntax constructs. The transpiler rewrites the code, transforming syntax constructs into older ones. But as for new built-in functions, we need to implement them. JavaScript is a highly dynamic language, scripts may add/modify any functions, so that they behave according to the modern standard.

A script that updates/adds new functions is called “polyfill”. It “fills in” the gap and adds missing implementations.

Two interesting polyfills are:

core js that supports a lot, allows to include only needed features.
polyfill.io service that provides a script with polyfills, depending on the features and user’s browser.

28)    @HostListener("window:onbeforeunload",["$event"])
for event of closing the browser

29)window or global object
In a browser, global functions and variables declared with var (not let/const!) become the property of the global object:

var gVar = 5;
alert(window.gVar); // 5 (became a property of the global object)

If we used let instead, such thing wouldn’t happen:

let gLet = 5;
alert(window.gLet); // undefined (doesn't become a property of the global object)

If a value is so important that you’d like to make it available globally, write it directly as a property:

// make current user information global, to let all scripts access it
window.currentUser = {
  name: "John"
};

// somewhere else in code
alert(currentUser.name);  // John

// or, if we have a local variable with the name "currentUser"
// get it from window explicitly (safe!)
alert(window.currentUser.name); // John

30) "1" + 2 + 3 - 5 // 118

arr = [1,2,3,4]
arr.length = 0 //arr is deleted

31) for(var i=0; i<=5; i++){
  setTimeout(() => {
    console.log(i)
  })
}
// 5 5 5 5 5

32) for(let i=0; i<=5; i++){
  setTimeout(() => {
    console.log(i)
  })
}

33)The DOMContentLoaded event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.
vs onload or domload

34)rem px and % and calc()

35) Prototypes - check example for details
Every JavaScript object has an internal property called [[Prototype]]. If you look up a property via obj.propName or obj['propName'] and the object does not have such a property - which can be checked via obj.hasOwnProperty('propName') - the runtime looks up the property in the object referenced by [[Prototype]] instead. If the prototype-object also doesn't have such a property, its prototype is checked in turn, thus walking the original object's prototype-chain until a match is found or its end is reached.

Some JavaScript implementations allow direct access to the [[Prototype]] property, eg via a non-standard property named __proto__. In general, it's only possible to set an object's prototype during object creation: If you create a new object via new Func(), the object's [[Prototype]] property will be set to the object referenced by Func.prototype.
  
The ideal way to create a prototype is by calling new. But there are ways which are not good or not recommended like __proto__

36)Difference between __proto__ and prototype - 
__proto__ is the actual object that is used in the lookup chain to resolve methods, etc. prototype is the object that is used to build __proto__ when you create an object with new:
( new Foo ).__proto__ === Foo.prototype;
( new Foo ).prototype === undefined;

So prototype is not available on the instances themselves (or other objects), but only on the constructor functions.
prototype is only available on functions since they are derived from Function, Function, and Object but in anything else it is not. However, __proto__ is available everywhere.
15)Here, /path/to/script.js is an absolute path to the script from the site root. One can also provide a relative path from the current page. For instance, src="script.js" would mean a file "script.js" in the current folder.

16)A single <script> tag can’t have both the src attribute and code inside.
<script src="file.js">
  alert(1); // the content is ignored, because src is set
</script>

17)Nested comments are not supported! - /**/

18)ECMAScript 5 (ES5) appeared. It added new features to the language and modified some of the existing ones. To keep the old code working, most such modifications are off by default. You need to explicitly enable them with a special directive: "use strict".
let’s note that "use strict" can be put at the beginning of the function body instead of the whole script. Doing that enables strict mode in that function only. But usually, people use it for the whole script.

19)ECMAScript 5 (ES5)  added new features to the language and modified some of the existing ones. To keep the old code working, most such modifications are off by default
The "use strict" directive switches the engine to the “modern” mode, changing the behavior of some built-in features. 

20)Variables named apple and AppLE are two different variables.
Non-Latin letters are allowed, but not recommended

21)Any math which combines number with any alphabet results Non A Number NaN
alert( "not a number" / 2 ); // NaN, such division is erroneous

22)Backticks are “extended functionality” quotes. They allow us to embed variables and expressions into a string by wrapping them in alert( `Hello, ${name}!` ); // Hello, John!

23)The result of typeof null is "object". That’s wrong. It is an officially recognized error in typeof, kept for compatibility. Of course, null is not an object. It is a special value with a separate type of its own. So, again, this is an error in the language.

24)Numeric conversion happens in mathematical functions and expressions automatically.
alert( "6" / "2" ); // 3

25)Almost all mathematical operations convert values to numbers. A notable exception is addition +. If one of the added values is a string, the other one is also converted to a string.

26)The unary plus or, in other words, the plus operator + applied to a single value, doesn’t do anything to numbers. But if the operand is not a number, the unary plus converts it into a number.
+2 //2
+"2" //2
+"some" //NaN
+null //0

27)Exponentiation **
The exponentiation operator ** is a recent addition to the language.
For a natural number b, the result of a ** b is a multiplied by itself b times.
alert( 2 ** 4 ); // 16 (2 * 2 * 2 * 2)
alert( 2 ** 3 ); // 8  (2 * 2 * 2)

28)A double NOT !! is sometimes used for converting a value to boolean type:
console.log( !!"non-empty string" ); // true
console.log( !!null ); // false

29)In JavaScript, there are three types of object fields (properties and methods):

Public: accessible from anywhere. They comprise the external interface. Till now we were only using public properties and methods.
Private: accessible only from inside the class. These are for the internal interface.
“protected” fields: accessible only from inside the class and those extending it (like private, but plus access from inheriting classes). They are also useful for the internal interface. They are in a sense more widespread than private ones, because we usually want inheriting classes to gain access to them.
Protected fields are not implemented in JavaScript on the language level, but in practice they are very convenient, so they are emulated.

30)Protected properties are usually prefixed with an underscore _.
That is not enforced on the language level, but there’s a well-known convention between programmers that such properties and methods should not be accessed from the outside.

31)Built-in objects have their own static methods, for instance Object.keys, Array.isArray etc.

As we already know, native classes extend each other. For instance, Array extends Object.

Normally, when one class extends another, both static and non-static methods are inherited.

32)Object.keys and Array.isArray are all static methods.

33)In JavaScript we can only inherit from a single object. There can be only one [[Prototype]] for an object. And a class may extend only one other class.

34)Usually we inherit only one class in the javascript at a time.Inorder to make it simple and yet useful we can use mixins. We can mix any number of classes using this.By copying the prototype of the classes we want to use in our class, we can achieve this. Check classAdvanced for more details

35)The try..catch construct has two main blocks: try, and then catch:

First, the code in try {...} is executed.
If there were no errors, then catch(err) is ignored: the execution reaches the end of try and goes on skipping catch.
If an error occurs, then try execution is stopped, and the control flows to the beginning of catch(err). The err variable (can use any name for it) contains an error object with details about what’s happened.

36)Let’s imagine we’ve got a fatal error outside of try..catch, and the script died. Like a programming error or something else terrible.
window.onerror = function(message, url, line, col, error) {
  // ...
};
<script>
  window.onerror = function(message, url, line, col, error) {
    alert(`${message}\n At ${line}:${col} of ${url}`);
  };

  function readData() {
    badFunc(); // Whoops, something went wrong!
  }

  readData();
</script>

37)When we develop something, we often need our own error classes to reflect specific things that may go wrong in our tasks. For errors in network operations we may need HttpError, for database operations DbError, for searching operations NotFoundError and so on.

Our errors should support basic error properties like message, name and, preferably, stack. But they also may have other properties of their own, e.g. HttpError objects may have statusCode property with a value like 404 or 403 or 500.

JavaScript allows to use throw with any argument, so technically our custom error classes don’t need to inherit from Error. But if we inherit, then it becomes possible to use obj instanceof Error to identify error objects. So it’s better to inherit from it.

As the application grows, our own errors naturally form a hierarchy, for instance HttpTimeoutError may inherit from HttpError, and so on.

function readUser(json) {
  let user = JSON.parse(json);

  if (!user.age) {
    throw new ValidationError("No field: age");
  }
  if (!user.name) {
    throw new ValidationError("No field: name");
  }

  return user;
}

Custom Error should be extended from the Main Error Object like

class ValidationError extends Error {
  constructor(message) {
    super(message);
    this.name = "ValidationError";
  }
}

class PropertyRequiredError extends ValidationError {
  constructor(property) {
    super("No property: " + property);
    this.name = "PropertyRequiredError";
    this.property = property;
  }
}

// Usage
function readUser(json) {
  let user = JSON.parse(json);

  if (!user.age) {
    throw new PropertyRequiredError("age");
  }
  if (!user.name) {
    throw new PropertyRequiredError("name");
  }

  return user;
}

38)Callbacks are multiple nested
But for multiple asynchronous actions that follow one after another we’ll have code like this:
loadScript('1.js', function(error, script) {

  if (error) {
    handleError(error);
  } else {
    // ...
    loadScript('2.js', function(error, script) {
      if (error) {
        handleError(error);
      } else {
        // ...
        loadScript('3.js', function(error, script) {
          if (error) {
            handleError(error);
          } else {
            // ...continue after all scripts are loaded (*)
          }
        });

      }
    })
  }
});

If anything breaks in between then all the code goes in vain so to overcome

loadScript('1.js', step1);

function step1(error, script) {
  if (error) {
    handleError(error);
  } else {
    // ...
    loadScript('2.js', step2);
  }
}

function step2(error, script) {
  if (error) {
    handleError(error);
  } else {
    // ...
    loadScript('3.js', step3);
  }
}

function step3(error, script) {
  if (error) {
    handleError(error);
  } else {
    // ...continue after all scripts are loaded (*)
  }
};

REVISIT - Promises, async/await , Generators, advanced iteration

39)As our application grows bigger, we want to split it into multiple files, so called “modules”. A module usually contains a class or a library of functions.

For a long time, JavaScript existed without a language-level module syntax. That wasn’t a problem, because initially scripts were small and simple, so there was no need.

But eventually scripts became more and more complex, so the community invented a variety of ways to organize code into modules, special libraries to load modules on demand.

For instance:

AMD – one of the most ancient module systems, initially implemented by the library require.js.
CommonJS – the module system created for Node.js server.
UMD – one more module system, suggested as a universal one, compatible with AMD and CommonJS.

40)What is a module?
A module is just a file. One script is one module.

Modules can load each other and use special directives export and import to interchange functionality, call functions of one module from another one:

export keyword labels variables and functions that should be accessible from outside the current module.
import allows to import functionality from other modules.

What’s different in modules, compared to “regular” scripts?
There are core features, valid both for browser and server-side JavaScript.
check moduleBasic.js

41)Module Level Scope - The variables and function of one module doesn't get collided to another module? Know this

42)A module when imported twice doesn't actually get imported twice but it is evaluated only once and then passed to further imports. Important part is All importers get exactly the one and only copy. // Both 1.js and 2.js imported the same object// Changes made in 1.js are visible in 2.js
So, let’s reiterate – the module is executed only once. Exports are generated, and then they are shared between importers, so if something changes the admin object, other modules will see that.

Consider the below scenario

For instance, admin.js module may provide certain functionality, but expect the credentials to come into the admin object from outside:

// 📁 admin.js
export let admin = { };

export function sayHi() {
  alert(`Ready to serve, ${admin.name}!`);
}

In init.js, the first script of our app, we set admin.name. Then everyone will see it, including calls made from inside admin.js itself:

// 📁 init.js
import {admin} from './admin.js';
admin.name = "Pete";

Another module can also see admin.name:
// 📁 other.js
import {admin, sayHi} from './admin.js';
alert(admin.name); // Pete
sayHi(); // Ready to serve, Pete!

43)Async in the scripts - For non-module scripts, async attribute only works on external scripts. Async scripts run immediately when ready, independently of other scripts or the HTML document.For module scripts, it works on any scripts.
That’s good for functionality that doesn’t depend on anything, like counters, ads, document-level event listeners.

<script async type="module">
  import {counter} from './analytics.js';

  counter.count();
</script>

44)Old browsers do not understand type="module". Scripts of the unknown type are just ignored. For them, it’s possible to provide a fallback using nomodule attribute:

 <script type="module">
  alert("Runs in modern browsers");
</script>

<script nomodule>
  alert("Modern browsers know both type=module and nomodule, so skip this")
  alert("Old browsers ignore script with unknown type=module, but execute this.");
</script>

45)Build Process - 
Build tools do the following:

Take a “main” module, the one intended to be put in <script type="module"> in HTML.
Analyze its dependencies: imports and then imports of imports etc.
Build a single file with all modules (or multiple files, that’s tunable), replacing native import calls with bundler functions, so that it works. “Special” module types like HTML/CSS modules are also supported.
In the process, other transforms and optimizations may be applied:
Unreachable code removed.
Unused exports removed (“tree-shaking”).
Development-specific statements like console and debugger removed.
Modern, bleeding-edge JavaScript syntax may be transformed to older one with similar functionality using Babel.
The resulting file is minified (spaces removed, variables replaced with shorter names, etc).
In production, people often use bundlers such as Webpack to bundle modules together for performance and other reasons.

Tree shaking is a term commonly used within a JavaScript context to describe the removal of dead code. It relies on the import and export statements in ES2015 to detect if code modules are exported and imported for use between JavaScript files

Sometimes we would have written import * from file which would include all the functions in the file as we are using *. The webpack does treeshaking and removes all the unused references and makes build file smaller

46)function sayHi(user) {
  alert(`Hello, ${user}!`);
}

function sayBye(user) {
  alert(`Bye, ${user}!`);
}

export {sayHi, sayBye}; // a list of exported variables

Usually, we put a list of what to import in curly braces import {...}, like this:



// 📁 main.js
import {sayHi, sayBye} from './say.js';

sayHi('John'); // Hello, John!
sayBye('John'); // Bye, John!

But if there’s a lot to import, we can import everything as an object using import * as <obj>, for instance:

47)import {sayHi as hi, sayBye as bye} from './say.js';
export {sayHi as hi, sayBye as bye};

47) What is export default?
In practice, there are mainly two kinds of modules.

Module that contains a library, pack of functions, like say.js above.
Module that declares a single entity, e.g. a module user.js exports only class User.
Mostly, the second approach is preferred, so that every “thing” resides in its own module.

If you are exporting a single entity(class) in a file as in second approach then use export default. Else explicitly use {some} to use.

Put export default before the entity to export:


              // 📁 user.js
export default class User { // just add "default"
  constructor(name) {
    this.name = name;
  }
}
There may be only one export default per file.

…And then import it without curly braces:


           // 📁 main.js
import User from './user.js'; // not {User}, just User

new User('John');

48)Then dynamic import can be like this:
<!doctype html>
<script>
  async function load() {
    let say = await import('./say.js');
    say.hi(); // Hello!
    say.bye(); // Bye!
    say.default(); // Module loaded (export default)!
  }
</script>
<button onclick="load()">Click me</button>

//say.js
export function hi() {
  alert(`Hello`);
}

export function bye() {
  alert(`Bye`);
}

export default function() {
  alert("Module loaded (export default)!");
}

49)Proxy and Reflect
A Proxy object wraps another object and intercepts operations, like reading/writing properties and others, optionally handling them on its own, or transparently allowing the object to handle them.

Basically proxy is like interceptor which will intercept and does actions Inorder to modify the target

let proxy = new Proxy(target, handler)
target – is an object to wrap, can be anything, including functions.
handler – proxy configuration: an object with “traps”, methods that intercept operations. – e.g. get trap for reading a property of target, set trap for writing a property into target, and so on.

To intercept reading, the handler should have a method get(target, property, receiver).

let numbers = [0, 1, 2];

numbers = new Proxy(numbers, {
  get(target, prop) {
    if (prop in target) {
      return target[prop];
    } else {
      return 0; // default value
    }
  }
});

alert( numbers[1] ); // 1
alert( numbers[123] ); // 0 (no such item)

50)The set trap triggers when a property is written.
set(target, property, value, receiver):

let numbers = [];

numbers = new Proxy(numbers, { // (*)
  set(target, prop, val) { // to intercept property writing
    if (typeof val == 'number') {
      target[prop] = val;
      return true;
    } else {
      return false;
    }
  }
});

numbers.push(1); // added successfully

51)A call to eval(code) runs the string of code and returns the result of the last statement.
Rarely used in modern JavaScript, as there’s usually no need.
Can access outer local variables. That’s considered bad practice.
Instead, to eval the code in the global scope, use window.eval(code).
Or, if your code needs some data from the outer scope, use new Function and pass it as arguments.

52)Currying - Currying is a transformation of functions that translates a function from callable as f(a, b, c) into callable as f(a)(b)(c).

function curry(f) { // curry(f) does the currying transform
  return function(a) {
    return function(b) {
      return f(a, b);
    };
  };
}

// usage
function sum(a, b) {
  return a + b;
}

let curriedSum = curry(sum);

alert( curriedSum(1)(2) ); // 3

53)Event bubbling and capturing are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both elements have registered a handle for that event. The event propagation mode determines in which order the elements receive the event.

With bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements.

With capturing, the event is first captured by the outermost element and propagated to the inner elements.
Check example for reference

54)event.target
A handler on a parent element can always get the details about where it actually happened.
The most deeply nested element that caused the event is called a target element, accessible as event.target.

Note the differences from this (=event.currentTarget):

event.target – is the “target” element that initiated the event, it doesn’t change through the bubbling process.
this – is the “current” element, the one that has a currently running handler on it.

For instance, if we have a single handler form.onclick, then it can “catch” all clicks inside the form. No matter where the click happened, it bubbles up to <form> and runs the handler.

In form.onclick handler:

this (=event.currentTarget) is the <form> element, because the handler runs on it.
event.target is the actual element inside the form that was clicked.

55)What happens in bubbling is that the event propogates upwards always if clicked.If we have a table with 100 tds then attaching click for 100 is meaningless. To overcome that, bubbling comes to help. Click on any element and attach event only at the top of the table.

Event bubbling provides the foundation for event delegation in browsers. Now you can bind an event handler to a single parent element, and that handler will get executed whenever the event occurs on any of its child nodes (and any of their children in turn). This is event delegation. Here's an example of it in practice:

This is absolutely fantastic for web apps with event handlers bound to many elements, where new elements are dynamically created and/or removed in the DOM. With event delegation the number of event bindings can be drastically decreased by moving them to a common parent element, and code that dynamically creates new elements on the fly can be decoupled from the logic of binding their event handlers.

DOM event delegation is a mechanism of responding to ui-events via a single common parent rather than each child, through the magic of event "bubbling" (aka event propagation).

javascript.info Event Delegation is beautiful topic

56)Preventing browser's default action like may be <a href ...> a navigation can be prevented by using event.preventDefault(). To prevent a default action – use either event.preventDefault() or return false. The second method works only for handlers assigned with on<event>.

57)Creating Event Object 
<button id="elem" onclick="alert('Click!');">Autoclick</button>

<script>
  let event = new Event("click");
  elem.dispatchEvent(event);
</script>

58)We can make the click event to work quite differently with some addons
For instance, the button below only works on Alt+Shift+click:

<button id="button">Alt+Shift+Click on me!</button>
<script>
  button.onclick = function(event) {
    if (event.altKey && event.shiftKey) {
      alert('Hooray!');
    }
  };
</script>

59)In JavaScript the DOM elements can be accessed like may be

<div id="main">
  <p>Hi</p>
</div>

let el = main

Another Example
<form id="form">
  <input name="login">
</form>
alert(form.elements.login == form.login); // true, the same <input>