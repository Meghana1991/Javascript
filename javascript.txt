1)Every browser has javascript engine running in the background which runs the javascript code.
FireFox - spiderMonkey
Chrome - v8
Thats why the code can be written in the developer tools console area

2)there are some web development servers available like Live Server which actually has some extra features like auto reload on changes etc.
http://127.0.0.1:5500/index.html
here the url indicates from where the pages are served from.

3)The reasons for loading the <scripts> in the body tag is that -
Reason 1 - If you load in the head tag, then the problem is that if the script takes lot of time to load then the content of the body tag will not be loaded and user might experience some delay or may be whitepage while the browser is busy parsing/executing the javascript code in scripts etc.

Reason 2 - If you have scripts at the head where the javascript code in that script will have to talk to the elements in the HTML. In that case the elements should be loaded only then the script has to be applied kinda.

However, some 3rd party script should be run in the head tag itself 

4)Run the index.html in the browser and see "Hello world" and the same code in the terminal with node index.js then also you see "Hello world" because the browser v8 engine is integrated with node.

5)In javascript there is no separate floating point and integer or number. All the numbers are numbers like 1.02 and 1.99999 or 133232 or 1 is typeof number

6) Console guys
var some = undefined
typeof(some)
"undefined"

var some = null
typeof(some)
"object"

7)the values in the array need not be same type. var arr = ["hi", "sam", 3 , "phew"]

var p = { name : "anna", age : 26}
typeof(p)
"object"

var someArr = [1,2,"some","pl"]
typeof(someArr)
"object"

8)Procedure oriented programming will have many functions and many variables all together which calls each other and dependent of each other with messy approach like spagheti.
Object oriented approach will group the respective functions and variables in a Object. If you have car object then only those data related to car will be residing in it.
This approach is Object Oriented programming.This is called ENCAPSULATION.

9)You have a DVD player with full complexity inside and outside you have fewer buttons to interact with Likewise we can make our object have all complex logic hidden exposing only simple functions and variables for the outsidee world. Make the complex functions and variables private within them to abstract it. By doing this one can give a simple interface

10)Inheritance as you know helps us to remove redundant code. You need not write code in multiple places instead choose Inheritance

11) In ES6, a new feature is like -

var obj = {
    radius : radius,
    border  : 1
}

or

var obj = {
    radius,
    border  : 1
}

Here key and value are both same, so you can directly use radius

12)The keyword new is very special. Whenever used it creates a new empty objec copy and then add properties and functions to it and then returns it. Without this if you invoke the object, then the this will point to global window object. By using new, it makes it point to the guy who called it.

Example: var some = new Circle(1)
Example: var phew = Circle(1)
So the new plays a very important role in this ;)

13)Every object has a constructor property in it.
A string can be created like "some" or " " or new String("some")
A number can be created like 1, 2 or new Number(4)
A function can be created like function some(){} or like 
new Function('args',`this.draw = function(){console.log("hi")`)

14)Every function is a object. 

15)Here, /path/to/script.js is an absolute path to the script from the site root. One can also provide a relative path from the current page. For instance, src="script.js" would mean a file "script.js" in the current folder.

16)A single <script> tag can’t have both the src attribute and code inside.
<script src="file.js">
  alert(1); // the content is ignored, because src is set
</script>

17)Nested comments are not supported! - /**/

18)ECMAScript 5 (ES5) appeared. It added new features to the language and modified some of the existing ones. To keep the old code working, most such modifications are off by default. You need to explicitly enable them with a special directive: "use strict".
let’s note that "use strict" can be put at the beginning of the function body instead of the whole script. Doing that enables strict mode in that function only. But usually, people use it for the whole script.

19)ECMAScript 5 (ES5)  added new features to the language and modified some of the existing ones. To keep the old code working, most such modifications are off by default
The "use strict" directive switches the engine to the “modern” mode, changing the behavior of some built-in features. 

20)Variables named apple and AppLE are two different variables.
Non-Latin letters are allowed, but not recommended

21)Any math which combines number with any alphabet results Non A Number NaN
alert( "not a number" / 2 ); // NaN, such division is erroneous

22)Backticks are “extended functionality” quotes. They allow us to embed variables and expressions into a string by wrapping them in alert( `Hello, ${name}!` ); // Hello, John!

23)The result of typeof null is "object". That’s wrong. It is an officially recognized error in typeof, kept for compatibility. Of course, null is not an object. It is a special value with a separate type of its own. So, again, this is an error in the language.

24)Numeric conversion happens in mathematical functions and expressions automatically.
alert( "6" / "2" ); // 3

25)Almost all mathematical operations convert values to numbers. A notable exception is addition +. If one of the added values is a string, the other one is also converted to a string.

26)The unary plus or, in other words, the plus operator + applied to a single value, doesn’t do anything to numbers. But if the operand is not a number, the unary plus converts it into a number.
+2 //2
+"2" //2
+"some" //NaN
+null //0

27)Exponentiation **
The exponentiation operator ** is a recent addition to the language.
For a natural number b, the result of a ** b is a multiplied by itself b times.
alert( 2 ** 4 ); // 16 (2 * 2 * 2 * 2)
alert( 2 ** 3 ); // 8  (2 * 2 * 2)

28)A double NOT !! is sometimes used for converting a value to boolean type:
console.log( !!"non-empty string" ); // true
console.log( !!null ); // false